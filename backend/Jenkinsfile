pipeline {
    agent any
    tools {
        jdk 'jdk-21'
        gradle 'gradle-8.7'
    }
    environment {
        mainBranch = 'main'
        baseDir = 'backend'
        credentialDotenvName = 'vinopener-backend-dotenv'
        publishOverSshConfigName = 'vinopener-backend-ssh-publish'
        dockerComposeProjectName = 'vinopener-backend'
    }
    stages {
        stage('backend build') {
            steps {
                dir(baseDir) {
                    withGradle {
                        sh 'gradle bootJar'
                    }
                }
            }
        }
        stage('backend test') {
            steps {
                dir(baseDir) {
                    withGradle {
                        sh 'gradle test'
                    }
                }
            }
        }
        stage('backend deploy') {
            when {
                branch mainBranch
            }
            steps {
                dir(baseDir) {
                    withCredentials([file(credentialsId: credentialDotenvName, variable: 'dotenv')]) {
                        sh 'cp $dotenv .env'
                    }
                    sshPublisher(
                        failOnError: true,
                        publishers: [
                            sshPublisherDesc(
                                configName: publishOverSshConfigName,
                                transfers: [
                                    sshTransfer(
                                        cleanRemote: false,
                                        excludes: '',
                                        execCommand: """
                                            cd ${publishOverSshConfigName};
                                            docker compose -p ${dockerComposeProjectName} up --build -d;
                                            docker image prune -f
                                        """,
                                        execTimeout: 120000,
                                        flatten: false,
                                        makeEmptyDirs: false,
                                        noDefaultExcludes: false,
                                        patternSeparator: '[, ]+',
                                        remoteDirectory: publishOverSshConfigName,
                                        remoteDirectorySDF: false,
                                        removePrefix: '',
                                        sourceFiles: 'build/libs/*.jar, src/main/resources/*.sql, Caddyfile, Dockerfile, docker-compose.yml, .env'
                                    )
                                ],
                                usePromotionTimestamp: false,
                                useWorkspaceInPromotion: false,
                                verbose: true
                            )
                        ]
                    )
                }
            }
            post {
                always {
                    dir(baseDir) {
                        sh 'rm -f .env'
                    }
                }
            }
        }
    }
    post {
        failure {
            mattermostSend(
                color: 'danger',
                message: "BACKEND FAIL: ${BRANCH_NAME} #${env.BUILD_ID}\n${env.BUILD_URL}"
            )
        }
    }
}
